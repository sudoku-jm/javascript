
1. 서버가동하기

open with live server : 원시적인 방법이다.
node.js에서 확인하기로 서버를 열어서 브라우저 확인을 하도록 한다.

> parcel index.html
----------------------------------------
package.json으로 이동.
해당 프로젝트에서만 동작되는 것.
parcel-bundle : 해당 개발자 도구 번들러의 도움을 받는다.
기존에 깔았던 번들러이다.
"devDependencies": {
    "parcel-bundler": "^1.12.5"
},

[추가]
"scripts": {
    "dev" : "parcel index.html"
},

scripts 로 추가 한 내용 실행.
> npm run dev
---------------------------------------------
[결과]
Server running at http://localhost:1234 
✨  Built in 480ms.

해당링크로 이동 확인.


=====================================
2. 일반 의존성 라이브러리 사용하기
"dependencies": {
    "lodash": "^4.17.21"
}

main.js로 이동
[추가]
> import _ from 'lodash'

해당 패키지는 node_modules 폴더안에 추가되어있다.
node_modules > lodash > package.json 확인
"main": "lodash.js", 추가되어있는 것을 확인 가능.
main.js에서 활용된다는 것을 알 수있다.

import _ from 'lodash'
_ 언더바를 이용해서 활용.
=============================================
3. 사용자용 서버열기
package.json 이동

[추가 명령어]
"scripts": {
    "dev" : "parcel index.html",
    "build" : "parcel build index.html"
},

"build" : "parcel build index.html"
실제 사용자들이 보는 용도의 결과물이 출력된다.

[서버 종료]
터미널 ctrl + c

[서버 빌드]
> npm run build

[결과]
✨  Built in 9.31s.
dist\main.d5383c2c.js.map    715.78 KB     60ms
dist\main.d5383c2c.js          92.8 KB    5.54s
dist\index.html                  275 B    3.50s

dist폴더 생성 및 map파일 등 생성.
띄어쓰기 등 빈 공간 제거. 코드 난독화 된다.

*난독화?
작성된 코드를 읽기 어렵게 만드는 작업.
빌드된 결과는 브라우저에서 해석되는 용도.
용량을 축소하고 읽기 어렵게 만드는 등의 최적화를 거치는 것이 좋다.

"parcel-bundler": "^1.12.5" 
이 역할을 해당 패키지가 한다.
개발 결과를 낼 때만 사용함. (개발 의존성 패키지)

main.js의 결과 : lodash 패키지까지 합해 번들(Bundle)한다

*번들(Bundle)?
프로젝트 개발에 사용한 여러 모듈을 하나로 묶어내는 작업.