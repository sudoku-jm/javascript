
<리액트>
"컴포넌트"라고 하는 코드 조각을 이용하여 복잡한 UI 구성을 지원.
https://ko.reactjs.org

https://www.w3schools.com/react/react_getstarted.asp

https://nodejs.org/ko/

npm install -g create-react-app   //node js 설치
npx create-react-app myreactapp   //react프로젝트생성
cd myreactapp                     //생성 프로젝트로 이동
npm start                         //서버에서 시작



<컴포넌트> Component
UI를 구성하기 위한 재사용 가능한 코드 조각.

생성 : HTMl 마크업 문법과 동일하게 작성.

<컨테이너> container
컴포넌트를 출력한 문서객체 모델.
컴포넌트를 담을 상자.

출력 : ReactDOM.render() 메소드 사용.




<JSX> javascript XML
자바스크립트 확장 문법.
javascript로 DOM생성 및 배치
    createElement(), appendChild() 메소드를 사용.
HTML 코드 그대로사용 -> babel 라이브러리 -> javascript 변환

//JSX
const component = <h1>HELLO REACT!!</h1>;                   //직관적이다.
const container = document.getElementById('root');
ReactDOM.render(component , container);

//javascript
const component = React.createElement('h1', {}, 'HELLO REACT!');
const container = document.getElementById('root');
ReactDOM.render(component, container);


<클래스 컴포넌트>
React.Component클래스를 상속한 클래스로 만든 컴포넌트
render() 메소드를 포함해야한다.

class 컴포넌트이름 extends React.Component{
    render(){
        return <h1>HELLO REACT!</h1>
    }
}

<컴포넌트의 기본 속성>      10-1-4.html
1. props
- React컴포넌트로 전달되는 argument
- 컴포넌트를 선언할 때, HTML 속성을 통해 전달.
- 다른 컴포넌트로 data를 전달 할 수 있게 해준다.

{this.props.(속성)}    <-      <컴포넌트 (속성)="데이터"/>


2. state
특정 컴포넌트에 한정되는 속성을 저장하는 객체

*선언 
속성 : 값 형태

this.state = {속성 : 값}

*변경
setState() 메소드 사용
state변경 시, render() 호출

this.setState({
    속성 : 값
})


<라이프 사이클>
컴포넌트 생명주기(LifeCycle)
-React 컴포넌트를 모니터하고 조작할 수 있는 3가지 주요 단계.
    - Mounting(마운트) : 컴포넌트의 인스턴스가 DOM에 삽입되는 단계
    - Updating(업데이트) : 컴포넌트가 변경되는 단계
    - Unmounting(언마운트) : 컴포넌트가 DOM에서 제거되는 단계



<라이프 사이클 주기 -Mounting >
constructor(props)
▼
getDerivedStateFromProps()
▼
render()
▼
componentDidMount()


-constructor(props)
: React 컴포넌트 실행 시 , 가장 먼저 호출되는 메소드
: 목적 - 이벤트 처리 메소드 바인딩, state 초기화
: 첫 문장 super(props)를 호출해야 한다.
: props를 매개변수로 사용해서 정의해야 한다.




---Updating(업데이트)시 주의 하여 볼 부분.
---다음과 같은 4가지 상황에서 발생.
1.props가 바뀔 때
2.state가 바뀔 때
3.부모 컴포넌트가 리렌더링 될 때
4.this.forceUpdate로 강제로 렌더링을 트리거할 때

