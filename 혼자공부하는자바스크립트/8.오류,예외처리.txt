구문오류와 예외
-구문오류(Syntaz error) : 프로그램이 실행되기 전에 발생하는 오류
  : 문법에 맞지 않게 작성하여 발생한 오류
  : 괄호나 문자열을 열었는데 닫지않은 경우, 숫자 하나에 여러개 소수점을 사용한 경우.

-예외(Exception) : 프로그램이 실행 된 이후에 발생하는 오류
  : 런타임 오류(Runtime error)
  : 프로그램이 제어할 수 없는 환경에서 발생한 오류
  : 객체, 속성 등 식별자가 존재하지 않는 경우, 숫자를 0으로 나누는 경우 등
  : TypeError, ReferenceError, RangeError 등..

- 기본 예외 처리
  : 조건문 등을 사용해 예외가 발생하지 않게 만드는 것.
  : Javascript는 타 언어보다 유연하여 예외 발생 가능성이 적다.
  : "Index Out of Bound Exception"- 배열의 길이를 넘는 index를 접근하는 경우 발생하는 예외
    -Javascript에서는 예외 발생하지 않는다. => undefined출력
  
- 문제 발생 가능성이 있는 부분을 조건문 등으로 처리해주어야한다.


- 고급 예외 처리
  : try catch finally 구문을 사용해서 예외를 처리하는 방법.
  try{
    // 예외가 발생할 가능성이 있는 코드
  }catch(exception){
    // 예외가 발생했을 때 실행할 코드
  }finally{
    // 무조건 실행할 코드
  }



- finally를 사용하는 이유
 : try ~ catch 구문 내부에서 return, break, continue 키워드가 쓰이면 finally 구문 사용유무에 따라 실행결과가 달라진다.


- 예외 객체
 : 예외 발생 정보를 확인할 수 있는 객체.
 : try cathch문의 catch 괄호 안에 입력하는 식별자.
 : 임의의 식별자 가능. e 또는 exception 이라고 입력.
 : 예외 객체 공통 속성
    name    -   예외 이름
    message -   예외 메시지

- 예외 강제 발생
 : 예외를 강제로 발생시키는 이유?
  - 프로그램이 의도하지 않은 형태로 사용될 때, 의도한 대로 처리하게 유도하기 위해
  - 사용자에게 프로그램 사용에 대해 주의를 주기 위해
  - undefined, NaN 이라는 값이 있어 느슨한 예외 발생에 긴장감을 주기 위해
   (javascript는 다른 언어에 비해 예외 발생이 많지 않기 때문에 코드를 안전하게 사용하기 위해)

  => 키워드 
  throw 문자열
  throw new Error(문자열)
















